{"ast":null,"code":"import { GET_DOGS, FILTER } from \"../actions/constants\";\nlet initialState = {\n  dogs: []\n};\n\nconst root = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_DOGS:\n      return { ...state,\n        dogs: action.payload\n      };\n\n    case FILTER:\n      const allDogs = state.dogs;\n      const filter = action.payload === 'todos' ? allDogs : allDogs.filter(e => {\n        if (action.payload == 'existente') {\n          console.log('AAAAAAAAAAAAA');\n          return e.status == undefined;\n        }\n\n        ;\n\n        if (action.payload == 'agregada') {\n          console.log(action.payload);\n          return e.status == true;\n        }\n      });\n      return { ...state,\n        dogs: filter\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default root;","map":{"version":3,"sources":["/home/mateo/PI-Dogs-PierreMateo/PI-Dogs/client/src/reducer/reducer.js"],"names":["GET_DOGS","FILTER","initialState","dogs","root","state","action","type","payload","allDogs","filter","e","console","log","status","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,sBAAjC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,IAAI,EAAG;AADQ,CAAnB;;AAIA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,QAAL;AACA,aAAO,EACH,GAAGK,KADA;AAEHF,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAFV,OAAP;;AAIA,SAAKP,MAAL;AACI,YAAMQ,OAAO,GAAGJ,KAAK,CAACF,IAAtB;AACA,YAAMO,MAAM,GAAGJ,MAAM,CAACE,OAAP,KAAmB,OAAnB,GAA6BC,OAA7B,GAAuCA,OAAO,CAACC,MAAR,CAAgBC,CAAC,IAAI;AACvE,YAAGL,MAAM,CAACE,OAAP,IAAkB,WAArB,EAAiC;AAC7BI,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,iBAAOF,CAAC,CAACG,MAAF,IAAYC,SAAnB;AACH;;AAAA;;AACD,YAAGT,MAAM,CAACE,OAAP,IAAkB,UAArB,EAAgC;AAC5BI,UAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACE,OAAnB;AACA,iBAAOG,CAAC,CAACG,MAAF,IAAY,IAAnB;AACH;AACJ,OATqD,CAAtD;AAUA,aAAO,EACH,GAAGT,KADA;AAEHF,QAAAA,IAAI,EAAEO;AAFH,OAAP;;AAIJ;AACA,aAAOL,KAAP;AAvBJ;AAyBH,CA1BD;;AA4BA,eAAeD,IAAf","sourcesContent":["import { GET_DOGS, FILTER } from \"../actions/constants\";\n\nlet initialState = {\n    dogs : [],\n};\n\nconst root = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_DOGS : \n        return {\n            ...state,\n            dogs: action.payload\n        }\n        case FILTER :\n            const allDogs = state.dogs;\n            const filter = action.payload === 'todos' ? allDogs : allDogs.filter( e => {\n                if(action.payload == 'existente'){\n                    console.log('AAAAAAAAAAAAA');\n                    return e.status == undefined;\n                };\n                if(action.payload == 'agregada'){\n                    console.log(action.payload);\n                    return e.status == true\n                }\n            })\n            return {\n                ...state,\n                dogs: filter\n            }\n        default : \n        return state;\n    }\n};\n\nexport default root;"]},"metadata":{},"sourceType":"module"}